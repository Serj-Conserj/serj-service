# Registry authentication
x-registry-auth:

  registry.docker.io:
    username: ${DOCKER_USERNAME}
    password: ${DOCKER_PASSWORD}

services:

  backend:
    container_name: backend
    build: ./serj-back
    restart: unless-stopped
    ports:
      - 8000:8000
    environment:
      BOT_TOKEN: "${BOT_TOKEN}"
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS}"
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "${RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS}"
      RABBITMQ_HOST: "${RABBITMQ_HOST}"
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      PG_PORT: "${PG_PORT}"
      POSTGRES_HOST: "db"
      PGDATA: "${PGDATA}"
    depends_on:
      - db
      - rabbitmq
  
  consumer:
    container_name: consumer
    build: ./serj-consumer
    restart: unless-stopped
    volumes:
      - consumer:/var/lib/queue-consumer/logs
    depends_on:
      - backend

  frontend:
    container_name: frontend
    build: ./serj-front
    restart: unless-stopped
    expose:
      - 3000
    command: serve -s /usr/src/app/build -l 3000
    depends_on:
      - backend

  nginx:
    container_name: nginx
    build: ./nginx
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./certbot/www/:/var/www/certbot/:ro
      - ./certbot/conf/:/etc/letsencrypt/:ro
    depends_on:
      - frontend
      - certbot
    # TODO: make cron to auto update 
    # Перезапустит nginx контейнер каждые 24 часа и подгрузит новые сертификаты, если есть 
    # command: "/bin/sh -c 'while :; do sleep 6h & wait $${!};' nginx -s reload; done & nginx -g 'daemon off;'"

  certbot:
    container_name: certbot
    build: ./certbot_m
    restart: unless-stopped
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.13-management
    hostname: rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS}"
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "${RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS}"
    ports:
      - 15672:15672
      - 5672:5672
    volumes:
      - rabbitmq:/var/lib/rabbitmq
  
  db:
    container_name: db
    image: postgres:17
    restart: unless-stopped
    environment:
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    ports:
      - 5432:5432 # Do not change
    volumes:
      - pgdata:/var/lib/postgresql/data
    # TODO: Add healthcheck
  
  tgbot:
    container_name: tgbot
    build: ./serj-bot
    restart: unless-stopped
    environment:
      BOT_TOKEN: "${BOT_TOKEN}"
  
  drone_server:
    container_name: drone_server
    image: drone/drone:2.26-linux-amd64
    restart: unless-stopped
    expose:
      - 80 # Drone is hardcoded to 80, no way to change
    environment:
      DRONE_GITHUB_CLIENT_ID: "${DRONE_GITHUB_CLIENT_ID}"
      DRONE_GITHUB_CLIENT_SECRET: "${DRONE_GITHUB_CLIENT_SECRET}"
      DRONE_RPC_SECRET: "${DRONE_RPC_SECRET}"
      DRONE_SERVER_HOST: "${DRONE_SERVER_HOST}"
      DRONE_SERVER_PROTO: "${DRONE_SERVER_PROTO}"
    volumes:
      - /var/lib/drone:/data
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  rabbitmq: {}
  pgdata: {}
  consumer: {}
  # TODO: Give names to all volumes